@using MyFitScope.Web.ViewModels.Articles
@model ArticlesLIstingViewModel

@{
    this.Layout = "_ArticleLayout";
    this.ViewData["Title"] = "Articles";
}

<section class="bg-white rcorners p-3">
    <!-- Page Content -->
    @{
        var tokens = Model.ArticleCategory.Split("=", StringSplitOptions.RemoveEmptyEntries);
        var resultType = tokens[0];
        var resultValue = tokens[1];
    }

    @if (resultType == "search")
    {
        <h1 class="text-center">Search results for "@resultValue":</h1>
    }
    else
    {
        if (resultValue == "All")
        {
            <h1 class="text-center">All Articles</h1>
        }
        else
        {
            <h1 class="text-center">Articles from category "@resultValue.Replace("_", " ")"</h1>
        }

    }

    <hr />

    @if (Model.Articles.Count() == 0)
    {
        if (resultType == "search")
        {
            <p>Sorry, no articles found...</p>
        }
        else
        {
            <p>Sorry, we don't have any articles in this category at this moment...</p>
        }

    }
    else
    {
        var articles = Model.Articles.ToList();

        <div class="row">
            @foreach (var article in articles)
            {
                <!-- Article Card -->
                <div class="col-md-5">
                    <div class="single-blog">
                        <p class="blog-meta">By Admin <span>September 24, 2018</span></p>
                        <img src="@article.ImageUrl" />
                        <h2><a href="#">Learn how to make a website</a></h2>
                        <p class="blog-text">t is a long established fact that a reader will be distracted by the readable...</p>
                        <p><a href="#" class="read-more-btn">Read More</a> <span>Comments: (8)</span></p>
                    </div>
                </div>
            }
        </div>



        <!-- Pagination -->
        <nav class="text-center mt-3">
            <ul class="pagination justify-content-center">
                @{
                    var previousActive = Model.Articles.HasPreviousPage ? string.Empty : " disabled";
                    var nextActive = Model.Articles.HasNextPage ? string.Empty : " disabled";
                }

                <li class="@("page-item" + previousActive)">
                    <a class="page-link" asp-controller="Articles" asp-action="ArticlesListing" asp-route-articleCategory="@resultValue" asp-route-pageIndex="@(Model.Articles.PageIndex - 1)">Previous</a>
                </li>

                @for (var i = 1; i <= Model.Articles.TotalPages; i++)
                {
                    var currentActive = Model.Articles.PageIndex == i ? " active" : string.Empty;

                    <li class="@("page-item" + currentActive)">
                        <a class="page-link" asp-controller="Articles" asp-action="ArticlesListing" asp-route-articleCategory="@resultValue" asp-route-pageIndex="@i">@i</a>
                    </li>

                }

                <li class="@("page-item" + nextActive)">
                    <a class="page-link" asp-controller="Articles" asp-action="ArticlesListing" asp-route-articleCategory="@resultValue" asp-route-pageIndex="@(Model.Articles.PageIndex + 1)">Next</a>
                </li>
            </ul>
        </nav>
    }
</section>

