@using MyFitScope.Common
@using MyFitScope.Web.ViewModels.Progresses
@model StatisticsListingViewModel

@{
    this.ViewData["Title"] = "User Statistics";
    this.Layout = "_LoggedInLayout";
}

    <section class="bg-white rcorners p-4">
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger" role="alert">
                @TempData["Error"]
            </div>
        }
        <header class="text-center">
            <h1>Physique Progress</h1>
            <hr />
        </header>
        <article>
            <a class="btn btn-primary btn-block" asp-controller="Progresses" asp-action="AddStatistic">Add Statistic</a>
        </article>
        <hr />
        @if (Model.Statistics.Count == 0)
        {
            <div class="alert alert-info" role="alert">
                You don't have any statistics! Please add one using the "Add Statistic" button!
            </div>
        }
        else
        {
            <article>
                <header>
                    <h2><i class="fas fa-tasks mr-3 bg-dark text-white p-2"></i>Body Meassurments Statistics:</h2>
                </header>
                @if (Model.Statistics.Count == 1)
                {
                    <div class="alert alert-info" role="alert">
                        You need to add atleast 2 Progress Statistics to activate the "Result Column"!
                    </div>
                }
                <section>
                    <table class="table table-striped bg-white">

                        <thead id="tableHead">
                            <tr>
                                <th scope="col">#</th>
                                <!--This loop creates the Date headers of the table-->
                                @for (var i = 0; i < Model.Statistics.Count; i++)
                                {
                                    <th class="text-center">
                                        @Model.Statistics[i].CreatedOn.ToShortDateString()       
                                    </th>
                                }
                                <th scope="col" class="text-left"></th>
                            </tr>

                        </thead>
                        <tbody id="tableBody">
                            <!--This loop creates the rows of the Progress table-->
                            @for (var i = 0; i < GlobalConstants.ProgressTableHeaderColumnRowsCount; i++)
                            {
                                <tr>
                                    <!--this switch adds the first "header column cell" (first column) of each row-->
                                    @switch (i)
                                    {
                                        case 0:
                                            <th scope="row">Weight</th>
                                            break;
                                        case 1:
                                            <th scope="row">Biceps</th>
                                            break;
                                        case 2:
                                            <th scope="row">Chest</th>
                                            break;
                                        case 3:
                                            <th scope="row">Stomach</th>
                                            break;
                                        case 4:
                                            <th scope="row">Hips</th>
                                            break;
                                        case 5:
                                            <th scope="row">Thigh</th>
                                            break;
                                        case 6:
                                            <th scope="row">Calf</th>
                                            break;
                                        case 7:
                                            <th scope="row">Delete Statistic</th>
                                            break;
                                        case 8:
                                            <th scope="row">Edit Statistic</th>
                                            break;
                                        default:
                                            <th scope="row">Error!</th>
                                            break;
                                    }
                                    <!--This loop adds the rest of the table row cells-->
                                    @for (int j = 0; j < Model.Statistics.Count; j++)
                                    {
                                        @switch (i)
                                        {
                                            case 0:
                                                <td class="text-center">@(Model.Statistics[j].Weight.ToString() == string.Empty ? "-" : Model.Statistics[j].Weight.ToString() + " kg")</td>
                                                break;
                                            case 1:
                                                <td class="text-center">@(Model.Statistics[j].Biceps.ToString() == string.Empty ? "-" : Model.Statistics[j].Biceps.ToString() + " cm")</td>
                                                break;
                                            case 2:
                                                <td class="text-center">@(Model.Statistics[j].Chest.ToString() == string.Empty ? "-" : Model.Statistics[j].Chest.ToString() + " cm")</td>
                                                break;
                                            case 3:
                                                <td class="text-center">@(Model.Statistics[j].Stomach.ToString() == string.Empty ? "-" : Model.Statistics[j].Stomach.ToString() + " cm")</td>
                                                break;
                                            case 4:
                                                <td class="text-center">@(Model.Statistics[j].Hips.ToString() == string.Empty ? "-" : Model.Statistics[j].Hips.ToString() + " cm")</td>
                                                break;
                                            case 5:
                                                <td class="text-center">@(Model.Statistics[j].Thigh.ToString() == string.Empty ? "-" : Model.Statistics[j].Thigh.ToString() + " cm")</td>
                                                break;
                                            case 6:
                                                <td class="text-center">@(Model.Statistics[j].Calf.ToString() == string.Empty ? "-" : Model.Statistics[j].Calf.ToString() + " cm")</td>
                                                break;
                                            case 7:
                                                <td class="text-center"><a asp-controller="Progresses" asp-action="DeleteStatistic" asp-route-statisticId="@Model.Statistics[j].Id" class="btn btn-danger btn-sm" onclick="ConfirmDelete('@Model.Statistics[j].CreatedOn.ToShortDateString()')">Delete</a></td>
                                                break;
                                            case 8:
                                                <td class="text-center"><a asp-controller="Progresses" asp-action="EditStatistic" asp-route-statisticId="@Model.Statistics[j].Id" class="btn btn-info btn-sm">Edit</a></td>
                                                break;
                                            default:
                                                <td scope="row">Error!</td>
                                                break;
                                        }
                                    }
                                    <td></td>
                                </tr>
                            }
                            <tr>
                                <td class="font-weight-bold pt-3">Go to page</td>
                                <td colspan="@(Model.Statistics.Count.ToString())" class="text-center pt-3">
                                    <!-- Pagination -->
                                    <nav class="text-center">
                                        <ul class="pagination justify-content-center">
                                            @{
                                                var previousActive = Model.Statistics.HasPreviousPage ? string.Empty : " disabled";
                                                var nextActive = Model.Statistics.HasNextPage ? string.Empty : " disabled";
                                            }

                                            <li class="@("page-item" + previousActive)">
                                                <a class="page-link" asp-controller="Progresses" asp-action="Statistics" asp-route-pageIndex="@(Model.Statistics.PageIndex - 1)">Previous</a>
                                            </li>

                                            @for (var i = 1; i <= Model.Statistics.TotalPages; i++)
                                            {
                                                var currentActive = Model.Statistics.PageIndex == i ? " active" : string.Empty;

                                                <li class="@("page-item" + currentActive)">
                                                    <a class="page-link" asp-controller="Progresses" asp-action="Statistics" asp-route-pageIndex="@i">@i</a>
                                                </li>

                                            }

                                            <li class="@("page-item" + nextActive)">
                                                <a class="page-link" asp-controller="Progresses" asp-action="Statistics" asp-route-pageIndex="@(Model.Statistics.PageIndex + 1)">Next</a>
                                            </li>
                                        </ul>
                                    </nav>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </section>
            </article>

        }
    </section>

@section Scripts {
    <script>
        function ConfirmDelete(date) {
            if (!confirm(`Confirm that you want to delete statistic with date "${date}"?`)) {
                event.preventDefault();
            }
        }

        function GenerateProgressTableLastCells() {
            FillLastTHeaderCell();

            FillLastTBodyCells();
        }

        function FillLastTHeaderCell() {
            let tHeadElement = document.getElementById("tableHead");

            let tHeadChildren = ((tHeadElement.children)[0]).children;

            let lastTHCell = tHeadChildren[tHeadChildren.length - 1];

            if (tHeadChildren.length - 2 == 1) {
                lastTHCell.innerHTML = "(Add more " + "<br>" + " statistics!)";
            }
            else {
                lastTHCell.innerHTML = "From " + tHeadChildren[1].textContent + "<br> to " + tHeadChildren[tHeadChildren.length - 2].textContent;
            }
        }

        function FillLastTBodyCells() {
            let bodyRows = document.getElementsByTagName("tbody")[0].children;



            for (let i = 0; i < bodyRows.length - 3; i++) {
                let currentRowCells = bodyRows[i].children;

                let lastCell = currentRowCells[currentRowCells.length - 1];

                let result = 0;

                if (currentRowCells.length - 2 == 1) {
                    result = 'not enough statistics';
                }
                else if (currentRowCells[1].textContent !== "-" && currentRowCells[currentRowCells.length - 2].textContent !== "-") {
                    let first = (currentRowCells[currentRowCells.length - 2].textContent.split(" "))[0];         
                    let last = (currentRowCells[1].textContent.split(" "))[0];

                    result = first - last;
                } else {
                    for (let j = 2; j < currentRowCells.length - 1; j++) {
                        if (currentRowCells[j - 1].textContent === "-" || currentRowCells[j].textContent === "-") {
                            continue;
                        }

                        let prev = (currentRowCells[j - 1].textContent.split(" "))[0];
                        let curr = (currentRowCells[j].textContent.split(" "))[0];

                        let currentDifference = prev - curr;

                        result += currentDifference;
                    }
                }

                //add up or down arrow depending by the result value:
                if (result > 0) {
                    lastCell.innerHTML = "<i class=\"fas fa-caret-square-down text-success\"></i> " + result.toFixed(1);

                    if (i == 0) {
                        lastCell.innerHTML += " kg";
                    } else {
                        lastCell.innerHTML += " cm";
                    }

                    lastCell.innerHTML += " less";
                } else if (result < 0) {
                    result *= (-1);
                    lastCell.innerHTML = "<i class=\"fas fa-caret-square-up text-danger\"></i> " + result.toFixed(1);

                    if (i == 0) {
                        lastCell.innerHTML += " kg";
                    } else {
                        lastCell.innerHTML += " cm";
                    }

                    lastCell.innerHTML += " more";
                } else if (result === 'not enough statistics') {
                    lastCell.innerHTML = "-";
                } else {
                    lastCell.innerHTML = "no change";
                }
            }
        }

        window.onload = GenerateProgressTableLastCells;
    </script>
}
