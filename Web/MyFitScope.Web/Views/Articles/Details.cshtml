@using MyFitScope.Common
@using MyFitScope.Web.ViewModels.Articles
@model DetailsArticleViewModel

@{
    this.Layout = "_ArticleLayout";
    this.ViewData["Title"] = Model.Title + " Details";
}

<!-- Post Content Column -->

<!-- Title -->
<h1 class="mt-4">@Model.Title</h1>

<!-- Author -->
<p class="lead">
    by
    @Model.UserUserName
</p>

<hr>

<!-- Date/Time -->
<p>Posted on January 1, 2019 at 12:00 PM</p>

<hr>

<!-- Preview Image -->
<img class="img-fluid rounded article-details-image" src="@Model.ImageUrl" alt="Article Image">

<hr>

<!-- Post Content -->
<p>@Html.Raw(Model.SanitizedContent)</p>

<!-- Edit/Delete buttons-->
@if (this.User.IsInRole("Admin"))
{
    <div class="text-center mt-4 mb-4">
        <a class="btn btn-info" asp-controller="Articles" asp-action="EditArticle" asp-route-articleId="@Model.Id">Edit</a>
        <a class="btn btn-danger ml-lg-5" asp-controller="Articles" asp-action="DeleteArticle" asp-route-articleId="@Model.Id" onclick="ConfirmDelete('@string.Format(GlobalConstants.ArticleConfirmDeleteMessage, Model.Title)')">Delete</a>
    </div>
}

<hr>

<!-- Comments Input Form -->
@if (this.User.Identity.IsAuthenticated)
{
    <div class="card my-4">
        <h5 class="card-header bg-dark text-light">Leave a Comment:</h5>
        <div class="card-body">
            <form id="commentInputForm" method="post" asp-controller="Comments" asp-action="AddComment">
                <input type="hidden" name="articleId" value="@Model.Id" />
                <div class="form-group">
                    <textarea class="form-control" rows="3" name="commentContent"></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>
    </div>
}

<!-- Comments and Responses Section -->
@foreach (var comment in Model.Comments)
{

    <partial name="_CommentPartial" model="@comment" />
}




@section Scripts {
    <script>
        function AddResponseInputForm() {
            // get event target element:
            let eventElement = event.target;

            // get target main parrent div element
            let parentDivElement = ((eventElement.parentNode).parentNode).nextElementSibling;

            console.log(parentDivElement);

            //get hidden input element with parent comment Id:
            let parentCommentId = parentDivElement.children[0].value;

            //remove responseInputForm element if exists:
            let responseInputForm = document.getElementById("responseInputForm");

            if (responseInputForm) {
                responseInputForm.parentNode.removeChild(responseInputForm);
            }

            //create form element
            let responseForm = document.createElement("form");
            responseForm.style.border = "1px solid black";
            responseForm.setAttribute("id", "responseInputForm");
            responseForm.setAttribute("method", "post");
            responseForm.setAttribute("action", "/Responses/AddResponse");

            let formDiv = document.createElement("div");
            formDiv.classList.add("form-group");

            // create response input element
            let responseLabel = document.createElement("label");
            responseLabel.setAttribute("for", "responseInput");
            responseLabel.textContent = "Add your Response:";

            let responseContentArea = document.createElement("input");
            responseContentArea.setAttribute("type", "text");
            responseContentArea.setAttribute("id", "responseInput");
            responseContentArea.setAttribute("name", "responseContent");
            responseContentArea.classList.add("form-control");

            //create hidden input element that holds the parent commentId:
            let hiddenInput = document.createElement("input");
            hiddenInput.setAttribute("type", "hidden");
            hiddenInput.setAttribute("name", "parentCommentId");
            hiddenInput.setAttribute("value", parentCommentId);

            //create hidden input element that holds the articleId:
            let secondHiddenInput = document.createElement("input");
            secondHiddenInput.setAttribute("type", "hidden");
            secondHiddenInput.setAttribute("name", "articleId");
            secondHiddenInput.setAttribute("value", "@Model.Id");

            //create hidden input element that holds the RequestVerificationToken:
            let verificationToken = $("input[name='__RequestVerificationToken']").attr('value');

            let tokenHiddenInput = document.createElement("input");
            tokenHiddenInput.setAttribute("type", "hidden");
            tokenHiddenInput.setAttribute("name", "__RequestVerificationToken");
            tokenHiddenInput.setAttribute("value", verificationToken);



            // create submit button
            let submitButton = document.createElement("button");
            submitButton.setAttribute("type", "submit");
            submitButton.classList.add("btn");
            submitButton.classList.add("btn-primary");
            submitButton.textContent = "Response";


            // append response input to form div
            formDiv.appendChild(responseLabel);
            formDiv.appendChild(responseContentArea);

            // append hidden inputs with parent commentId and articleId
            formDiv.appendChild(hiddenInput);
            formDiv.appendChild(secondHiddenInput);
            formDiv.appendChild(tokenHiddenInput);

            // append form div to responseForm
            responseForm.appendChild(formDiv);

            // append submit button to form element
            responseForm.appendChild(submitButton);

            // apend form to main parrent div element
            parentDivElement.insertBefore(responseForm, parentDivElement.firstChild);
        }
        
        function SendVote(votedObject, commentId, isUpVote) {
            let targetElement = event.target;

            let myJSObject = { VotedObject: votedObject, votedObjectId: commentId, isUpVote: isUpVote };
            let token = $("input[name='__RequestVerificationToken']").attr('value');

            $.ajax("/api/votes", {
                data: JSON.stringify(myJSObject),
                contentType: 'application/json',
                type: 'POST',
                headers: { 'X-CSRF-TOKEN': token },
                success: function (data) {
                    let parentUlElement = targetElement.parentNode;

                    while (!parentUlElement.classList.contains('parent-vote-element')) {
                        parentUlElement = parentUlElement.parentNode;
                    }

                    console.log(parentUlElement);

                    let upVoteSpan = parentUlElement.getElementsByClassName('vote-span')[0];
                    let downVoteSpan = parentUlElement.getElementsByClassName('vote-span')[1];

                    upVoteSpan.textContent = data.upVotes;
                    downVoteSpan.textContent = data.downVotes;
                }
            });         
        }
    </script>
}
